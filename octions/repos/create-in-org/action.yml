name: Create an organization repository
description: |
  Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository *   `repo` scope to create a private repository

inputs:
  token:
    description: |
      Token to authenticate the request
    required: true
  org:
    description: |
      org parameter
    required: true
  name:
    description: |
      The name of the repository.
    required: true
  description:
    description: |
      A short description of the repository.
    required: false
  homepage:
    description: |
      A URL with more information about the repository.
    required: false
  private:
    description: |
      Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.
    required: false
  visibility:
    description: |
      Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.   The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
    required: false
  has_issues:
    description: |
      Either `true` to enable issues for this repository or `false` to disable them.
    required: false
  has_projects:
    description: |
      Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
    required: false
  has_wiki:
    description: |
      Either `true` to enable the wiki for this repository or `false` to disable it.
    required: false
  is_template:
    description: |
      Either `true` to make this repo available as a template repository or `false` to prevent it.
    required: false
  team_id:
    description: |
      The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
    required: false
  auto_init:
    description: |
      Pass `true` to create an initial commit with empty README.
    required: false
  gitignore_template:
    description: |
      Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
    required: false
  license_template:
    description: |
      Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
    required: false
  allow_squash_merge:
    description: |
      Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
    required: false
  allow_merge_commit:
    description: |
      Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
    required: false
  allow_rebase_merge:
    description: |
      Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
    required: false
  delete_branch_on_merge:
    description: |
      Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
    required: false
  file_output:
    description: |
      Path to store full output of the action
    required: false
  custom_outputs:
    description: |
      Custom outputs to create for step. This has to be YAML multiline string literal `custom_outputs: \|<newline> output_name:path.in.result`
    required: false

runs:
  using: node12
  main: index.js

